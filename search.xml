<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>http2</title>
    <url>/2020/07/19/http2/</url>
    <content><![CDATA[<h1 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h1><p>不知不觉，很多网站已经开始使用 http2 的协议，甚至 google 已经开始使用特定的 http3 了。<br>相比于 http1.1，http2 的核心 <strong>二进制分帧</strong><br>其他的：多路复用，压缩头部，服务器推送，请求优先级</p>
<p>在应用层与传输层之间增加一个二进制分帧层，以此达到“在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破 HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。”</p>
<p>在二进制分帧层上，HTTP2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。</p>
<a id="more"></a>

<p>客户端和服务器可以把 HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送 stream，也可以一边接收者服务器的响应，而服务器那端同理。</p>
<p>原先只能一个一个按顺序发送资源，而现在则没有这个限制</p>
<p><strong>参考：</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbnVhbm51YW43MzYyL3AvMTAzOTc1MzYuaHRtbA==" title="https://www.cnblogs.com/nuannuan7362/p/10397536.html">https://www.cnblogs.com/nuannuan7362/p/10397536.html<i class="fa fa-external-link"></i></span></p>
<iframe src="//player.bilibili.com/player.html?aid=455561284&bvid=BV1p541147LD&cid=189611998&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>hybrid_app</title>
    <url>/2020/07/11/hybrid-app/</url>
    <content><![CDATA[<h1 id="hybrid-app"><a href="#hybrid-app" class="headerlink" title="hybrid app"></a>hybrid app</h1><p>混编 APP 是现在最为流行的开发方式，小程序也是基于此，通过更加定制化的 JSBridge，并使用双 WebView 双线程的模式隔离了 JS 逻辑与 UI 渲染，形成了特殊的开发模式。由于中国的特殊互联网环境，快速迭代成为了刚需，通过混编将一些需要快速迭代的页面使用 webview 实现，而一些稳定的，对性能要求高的页面通过原生实现。</p>
<p>本来想自己写点东西，但感觉下面这两篇已经写的很好了<br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjRmZjNiZWU1MWQ0NTE5NzIxYjk5ODY=" title="https://juejin.im/post/5b4ff3bee51d4519721b9986">Hybrid App 技术解析 – 原理篇<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjVlN2VjM2YyNjVkYTBmODc1OTNmOWI=" title="https://juejin.im/post/5b5e7ec3f265da0f87593f9b">Hybrid App 技术解析 – 实战篇<i class="fa fa-external-link"></i></span></p>
<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>问题是麻烦的，我们现在所使用最佳方案其实是前人绞尽脑汁外加实战总结出来的，但是我们却理所当然的认为，就应该是这样，针对不用的业务要有不同的定制化的方案，而不能照搬社区的轮子。</p>
]]></content>
      <tags>
        <tag>webview</tag>
      </tags>
  </entry>
  <entry>
    <title>jwt</title>
    <url>/2020/05/30/jwt/</url>
    <content><![CDATA[<p>jwt 全称 JSON Web Token，用来解决请求的认证问题。<br>jwt 使用算法加密来认证的，所以服务器端无需储存任何信息。</p>
<h1 id="JWT-的三个组成部分"><a href="#JWT-的三个组成部分" class="headerlink" title="JWT 的三个组成部分"></a>JWT 的三个组成部分</h1><h2 id="1-Header"><a href="#1-Header" class="headerlink" title="1. Header"></a>1. Header</h2><p>头部由算法和令牌类型构成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将 Json 进行 Base64URL 编码得到第一部分</p>
<a id="more"></a>

<h2 id="2-Payload"><a href="#2-Payload" class="headerlink" title="2. Payload"></a>2. Payload</h2><p>用来存放实际需要传递的数据，官方默认了 7 个数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure>

<p>除此之外可添加私有字段<br>将 Json 进行 Base64URL 编码得到第二部分</p>
<h2 id="3-Signature"><a href="#3-Signature" class="headerlink" title="3. Signature"></a>3. Signature</h2><p>Signature 部分是对前两部分的签名，防止数据篡改。<br>将第一部分和第二部分的 base64 再加上密钥通过第一部分的算法加密，得到第三部分<br>密钥是自行设定，是加密的核心，不可以泄露。</p>
<p><strong>参考</strong><br><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTgvMDcvanNvbl93ZWJfdG9rZW4tdHV0b3JpYWwuaHRtbA==" title="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8v" title="https://jwt.io/">https://jwt.io/<i class="fa fa-external-link"></i></span></p>
]]></content>
      <tags>
        <tag>login</tag>
      </tags>
  </entry>
  <entry>
    <title>FFC之margin</title>
    <url>/2020/05/17/FFC%E4%B9%8Bmargin/</url>
    <content><![CDATA[<h1 id="FFC"><a href="#FFC" class="headerlink" title="FFC"></a>FFC</h1><p>Flex Formatting Context 自适应格式化上下文。尽管很多浏览器已经支持 flex，但目前仍是 CR 阶段。</p>
<p>Flex 布局在表面上类似于块布局。它缺少许多可用于块布局的更复杂的以文本或文档为中心的属性，例如 float 和 column。作为回报，它获得了简单而强大的工具，可以按照 Web 应用程序和复杂网页经常需要的方式来分配空间和对齐内容。<br>可以在任何流动方向上进行布局（向左，向右，向下，甚至向上！）</p>
<p>可以在样式层颠倒或重新排列它们的显示顺序（即，视觉顺序可以独立于源和语音顺序）</p>
<p>可以沿单个（主轴）轴线性布置，也可以沿辅助（交叉）轴缠绕成多行</p>
<p>可以“调整”其大小以响应可用空间</p>
<p>可以相对于其容器对齐，也可以在次级容器上对齐（十字）</p>
<p>可以沿主轴动态折叠或展开，同时保持容器的十字尺寸。</p>
<a id="more"></a>

<h1 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h1><p>关于 flex 的使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA3L2ZsZXgtZ3JhbW1hci5odG1s" title="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html<i class="fa fa-external-link"></i></span> 阮一峰的这篇文章已经讲的很好了，当然类似由于时间久远有一些类似 space-evenly 的属性没有涉及，这里可看 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL2p1c3RpZnktY29udGVudA==" title="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content">https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content<i class="fa fa-external-link"></i></span></p>
<h1 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a>Margin</h1><p>我们主要说的是 auto 这个神奇的属性</p>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>在 BFC 中 auto 主要用来使元素水平居中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>If both margin-left and margin-right are auto, their used values are equal, causing horizontal centring.<br>If margin-top, or margin-bottom are auto, their used value is 0.</p>
</blockquote>
<p>auto 只能用来水平居中而不能垂直居中，因为在块格式化上下文中，如果 margin-left 和 margin-right 都是 auto，则它们的表达值相等，从而导致元素的水平居中。( 这里的计算值为元素剩余可用剩余空间的一半)</p>
<p>而如果 margin-top 和 margin-bottom 都是 auto，则他们的值都为 0，当然也就无法造成垂直方向上的居中。</p>
<h2 id="FFC-1"><a href="#FFC-1" class="headerlink" title="FFC"></a>FFC</h2><blockquote>
<p>Prior to alignment via justify-content and align-self, any positive free space is distributed to auto margins in that dimension.</p>
</blockquote>
<p>在 FFC 中，设置了 margin: auto 的元素，在通过 justify-content 和 align-self 进行对齐之前，任何正处于空闲的空间都会分配到该方向的自动 margin 中去</p>
<p>这里，很重要的一点是，margin auto 的生效不仅是水平方向，垂直方向也会自动去分配这个剩余空间。</p>
<p><strong>例：</strong></p>
<div style="width:100%;background:#367b66;height:50px;display:flex;align-items:center">
    <div style="padding:0 10px">栏目1 </div>
    <div style="padding:0 10px">栏目2</div>
    <div style="padding:0 10px">栏目3</div>
    <div style="padding:0 10px; margin-left:auto">栏目4</div>
</div>

<p>在父级设置 dislay：flex，在子级的最后一个元素设置 margin-left：auto，这样剩余的空间会全部分配到 auto 上，从而实现靠右的布局。</p>
<p>同理，我们也可以使用这样的特性实现 footer 的粘性布局</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>块格式化上下文中 margin-top 和 margin-bottom 的值如果是 auto，则他们的值都为 0</p>
<p>flex 格式化上下文中，在通过 justify-content 和 align-self 进行对齐之前，任何正处于空闲的空间都会分配到该方向的自动 margin 中去</p>
<p>单个方向上的自动 margin 也非常有用，它的计算值为该方向上的剩余空间</p>
<p>使用了自动 margin 的 flex 子项目，它们父元素设置的 justify-content 以及它们本身的 align-self 将不再生效</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL2p1c3RpZnktY29udGVudA==" title="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content">https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY29jbzFzL2FyY2hpdmUvMjAxOS8wNS8yMy8xMDkxMDU4OC5odG1s" title="https://www.cnblogs.com/coco1s/archive/2019/05/23/10910588.html">https://www.cnblogs.com/coco1s/archive/2019/05/23/10910588.html<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kYTc0MzhjZDRmNDk=" title="https://www.jianshu.com/p/da7438cd4f49">https://www.jianshu.com/p/da7438cd4f49<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1mbGV4Ym94LTEv" title="https://www.w3.org/TR/css-flexbox-1/">https://www.w3.org/TR/css-flexbox-1/<i class="fa fa-external-link"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>flutter集成ios和android</title>
    <url>/2020/05/01/flutter%E9%9B%86%E6%88%90ios%E5%92%8Candroid/</url>
    <content><![CDATA[<h1 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h1><p>flutter 是 Google 开源的 UI 工具包，再 flutter 之前有基于 WebView 的 Cordova，也有 HTML+JavaScript 渲染成原生控件的 React Native、Weex。webview 的缺点非常明显，性能，WebView 的渲染效率和 JavaScript 执行性能太差。后者虽然会生成对应的自定义原生控件，又带来了不得不处理平台相关逻辑的问题。</p>
<blockquote>
<p>flutter 从头到尾重写一套跨平台的 UI 框架，包括 UI 控件、渲染逻辑甚至开发语言。渲染引擎依靠跨平台的 Skia 图形库来实现，依赖系统的只有图形绘制相关的接口，可以在最大程度上保证不同平台、不同设备的体验一致性，逻辑处理使用支持 AOT 的 Dart 语言，执行效率也比 JavaScript 高得多。 —引自《Flutter 的原理及美团的实践》</p>
</blockquote>
<h1 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h1><p>当前 app 的头部格局趋于稳定，所以相比于重新开发一个 app，将 flutter 集成到原有 app 是一个更广泛的需求。<br>由于我司自建 B 端用户中心，需开发客户端 SDK，最终选型 flutter ，以节省人力。</p>
<a id="more"></a>

<h2 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h2><p>ios 端存在一个包管理器 Cocoapods，我们可以将 flutter 以 framework 的形式引入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flutter build ios --debug      //编译debug产物</span><br><span class="line">或者</span><br><span class="line">$ flutter build ios --release --no-codesign //编译release产物（选择不需要证书）</span><br></pre></td></tr></table></figure>

<p>编辑 podspec 文件<br>添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.static_framework &#x3D; true</span><br><span class="line"> p &#x3D; Dir::open(&quot;ios_frameworks&quot;)</span><br><span class="line"> arr &#x3D; Array.new</span><br><span class="line"> arr.push(&#39;ios_frameworks&#x2F;*.framework&#39;)</span><br><span class="line"> s.ios.vendored_frameworks &#x3D; arr</span><br></pre></td></tr></table></figure>

<p>ios 端引入<br><code>pod &#39;Flutter&#39;, :podspec =&gt; &#39;some/path/MyApp/Flutter/{build_mode}/Flutter.podspec&#39;</code></p>
<h2 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h2><p>将 flutter 打包成 aar</p>
<p>再安卓中直接在 app/build.gradle 下引入并添加配置</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  <span class="comment">// 本地是java8环境 需要添加如下配置</span></span><br><span class="line">  compileOptions &#123;</span><br><span class="line">        <span class="keyword">sourceCompatibility</span> <span class="number">1.8</span></span><br><span class="line">        <span class="keyword">targetCompatibility</span> <span class="number">1.8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;</span><br><span class="line">        <span class="comment">// 添加如下代码</span></span><br><span class="line">        profile &#123;</span><br><span class="line">            initWith debug</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">  maven &#123;</span><br><span class="line">    url <span class="string">'xxx/repo'</span></span><br><span class="line">    <span class="comment">// This is relative to the location of the build.gradle file</span></span><br><span class="line">    <span class="comment">// if using a relative path.</span></span><br><span class="line">  &#125;</span><br><span class="line">  maven &#123;</span><br><span class="line">    url <span class="string">'https://storage.googleapis.com/download.flutter.io'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  debugImplementation <span class="string">'com.example.flutter_module:flutter_debug:1.0'</span></span><br><span class="line">  profileImplementation <span class="string">'com.example.flutter_module:flutter_profile:1.0'</span></span><br><span class="line">  releaseImplementation <span class="string">'com.example.flutter_module:flutter_release:1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 AndroidManifest.xml 中注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">"io.flutter.embedding.android.FlutterActivity"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:theme</span>=<span class="string">"@style/LaunchTheme"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MyFlutterActivity"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在主页时初始化 flutter 引擎</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.android.material.floatingactionbutton.FloatingActionButton;</span><br><span class="line"><span class="keyword">import</span> io.flutter.view.FlutterMain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        FlutterMain.startInitialization(MainActivity.<span class="keyword">this</span>.getApplicationContext());</span><br><span class="line">        FloatingActionButton fab = findViewById(R.id.fab);</span><br><span class="line"></span><br><span class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, MyFlutterActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
  </entry>
  <entry>
    <title>ant-design-colors分析</title>
    <url>/2020/04/11/ant-design-colors%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="ant-design-colors"><a href="#ant-design-colors" class="headerlink" title="ant-design-colors"></a>ant-design-colors</h1><p>这是 antd 在实践中总结的配色的解决方案，现在已经沉淀出一个独立的库，作用是：根据给定的主题色生成 9 种衍生色，共 10 种颜色。来学习一下他是这么做的。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>核心在 generate.ts 这个文件中,代码不长</p>
<h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>首先它定义了一些常量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hueStep = <span class="number">2</span>; <span class="comment">// 色相阶梯</span></span><br><span class="line"><span class="keyword">const</span> saturationStep = <span class="number">16</span>; <span class="comment">// 饱和度阶梯，浅色部分</span></span><br><span class="line"><span class="keyword">const</span> saturationStep2 = <span class="number">5</span>; <span class="comment">// 饱和度阶梯，深色部分</span></span><br><span class="line"><span class="keyword">const</span> brightnessStep1 = <span class="number">5</span>; <span class="comment">// 亮度阶梯，浅色部分</span></span><br><span class="line"><span class="keyword">const</span> brightnessStep2 = <span class="number">15</span>; <span class="comment">// 亮度阶梯，深色部分</span></span><br><span class="line"><span class="keyword">const</span> lightColorCount = <span class="number">5</span>; <span class="comment">// 浅色数量，主色上</span></span><br><span class="line"><span class="keyword">const</span> darkColorCount = <span class="number">4</span>; <span class="comment">// 深色数量，主色下</span></span><br><span class="line"><span class="comment">// 暗色主题颜色映射关系表</span></span><br><span class="line"><span class="keyword">const</span> darkColorMap = [</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">7</span>, <span class="attr">opacity</span>: <span class="number">0.15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">6</span>, <span class="attr">opacity</span>: <span class="number">0.25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">5</span>, <span class="attr">opacity</span>: <span class="number">0.3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">5</span>, <span class="attr">opacity</span>: <span class="number">0.45</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">5</span>, <span class="attr">opacity</span>: <span class="number">0.65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">5</span>, <span class="attr">opacity</span>: <span class="number">0.85</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">4</span>, <span class="attr">opacity</span>: <span class="number">0.9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">3</span>, <span class="attr">opacity</span>: <span class="number">0.95</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">2</span>, <span class="attr">opacity</span>: <span class="number">0.97</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">opacity</span>: <span class="number">0.98</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>定义了三个函数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> HsvObject &#123;</span><br><span class="line">  h: <span class="built_in">number</span>;</span><br><span class="line">  s: <span class="built_in">number</span>;</span><br><span class="line">  v: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHue</span>(<span class="params">hsv: HsvObject, i: <span class="built_in">number</span>, light?: <span class="built_in">boolean</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSaturation</span>(<span class="params">hsv: HsvObject, i: <span class="built_in">number</span>, light?: <span class="built_in">boolean</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">hsv: HsvObject, i: <span class="built_in">number</span>, light?: <span class="built_in">boolean</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这三个函数分别用于获取 HSB，也就是上一篇说到的色相，饱和度，明度。<br>开头说过，会根据主题色衍生，共 10 种颜色。最浅的设为编号 1，最深的设为编号 10，主题色为编号 6.参数 i 则代表编号</p>
<a id="more"></a>

<h2 id="色相"><a href="#色相" class="headerlink" title="色相"></a>色相</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHue</span>(<span class="params">hsv: HsvObject, i: <span class="built_in">number</span>, light?: <span class="built_in">boolean</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hue: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// 根据色相不同，色相转向不同</span></span><br><span class="line">  <span class="comment">// 如果不理解“转向”可以了解一下HSB模型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.round(hsv.h) &gt;= <span class="number">60</span> &amp;&amp; <span class="built_in">Math</span>.round(hsv.h) &lt;= <span class="number">240</span>) &#123;</span><br><span class="line">    hue = light</span><br><span class="line">      ? <span class="built_in">Math</span>.round(hsv.h) - hueStep * i</span><br><span class="line">      : <span class="built_in">Math</span>.round(hsv.h) + hueStep * i;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    hue = light</span><br><span class="line">      ? <span class="built_in">Math</span>.round(hsv.h) + hueStep * i</span><br><span class="line">      : <span class="built_in">Math</span>.round(hsv.h) - hueStep * i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hue &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    hue += <span class="number">360</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hue &gt;= <span class="number">360</span>) &#123;</span><br><span class="line">    hue -= <span class="number">360</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饱和度"><a href="#饱和度" class="headerlink" title="饱和度"></a>饱和度</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSaturation</span>(<span class="params">hsv: HsvObject, i: <span class="built_in">number</span>, light?: <span class="built_in">boolean</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="comment">// grey color don't change saturation</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hsv.h === <span class="number">0</span> &amp;&amp; hsv.s === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 这个条件就意味着，颜色在圆柱模型的中轴线上，最上边是白，最下面是黑</span></span><br><span class="line">    <span class="keyword">return</span> hsv.s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> saturation: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">if</span> (light) &#123;</span><br><span class="line">    saturation = <span class="built_in">Math</span>.round(hsv.s * <span class="number">100</span>) - saturationStep * i;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i === darkColorCount) &#123;</span><br><span class="line">    <span class="comment">// 最深的颜色 + 16</span></span><br><span class="line">    saturation = <span class="built_in">Math</span>.round(hsv.s * <span class="number">100</span>) + saturationStep;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    saturation = <span class="built_in">Math</span>.round(hsv.s * <span class="number">100</span>) + saturationStep2 * i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 边界值修正</span></span><br><span class="line">  <span class="keyword">if</span> (saturation &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    saturation = <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第一格的 s 限制在 6-10 之间</span></span><br><span class="line">  <span class="keyword">if</span> (light &amp;&amp; i === lightColorCount &amp;&amp; saturation &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    saturation = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (saturation &lt; <span class="number">6</span>) &#123;</span><br><span class="line">    saturation = <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> saturation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="明度"><a href="#明度" class="headerlink" title="明度"></a>明度</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">hsv: HsvObject, i: <span class="built_in">number</span>, light?: <span class="built_in">boolean</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (light) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(hsv.v * <span class="number">100</span>) + brightnessStep1 * i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.round(hsv.v * <span class="number">100</span>) - brightnessStep2 * i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">color: <span class="built_in">string</span>, opts: Opts = &#123;&#125;</span>): <span class="title">string</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> patterns: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// 存储颜色的数组</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pColor = tinycolor(color); <span class="comment">// tinycolor 是一个库，用于转换颜色的形式，及获取颜色属性</span></span><br><span class="line">  <span class="comment">// 对亮色处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = lightColorCount; i &gt; <span class="number">0</span>; i -= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hsv = pColor.toHsv();</span><br><span class="line">    <span class="keyword">const</span> colorString: <span class="built_in">string</span> = tinycolor(&#123;</span><br><span class="line">      h: getHue(hsv, i, <span class="literal">true</span>),</span><br><span class="line">      s: getSaturation(hsv, i, <span class="literal">true</span>),</span><br><span class="line">      v: getValue(hsv, i, <span class="literal">true</span>),</span><br><span class="line">    &#125;).toHexString();</span><br><span class="line">    patterns.push(colorString);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// push主题色</span></span><br><span class="line">  patterns.push(pColor.toHexString());</span><br><span class="line">  <span class="comment">// 对暗色处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= darkColorCount; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hsv = pColor.toHsv();</span><br><span class="line">    <span class="keyword">const</span> colorString: <span class="built_in">string</span> = tinycolor(&#123;</span><br><span class="line">      h: getHue(hsv, i),</span><br><span class="line">      s: getSaturation(hsv, i),</span><br><span class="line">      v: getValue(hsv, i),</span><br><span class="line">    &#125;).toHexString();</span><br><span class="line">    patterns.push(colorString);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dark theme patterns</span></span><br><span class="line">  <span class="comment">// 这个位置，处理暗色主题，注意是主题，不是颜色</span></span><br><span class="line">  <span class="keyword">if</span> (opts.theme === <span class="string">"dark"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> darkColorMap.map(<span class="function">(<span class="params">&#123; index, opacity &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 将当前颜色与背景色按照一定比例混合</span></span><br><span class="line">      <span class="keyword">const</span> darkColorString: <span class="built_in">string</span> = tinycolor</span><br><span class="line">        .mix(opts.backgroundColor || <span class="string">"#141414"</span>, patterns[index], opacity * <span class="number">100</span>)</span><br><span class="line">        .toHexString();</span><br><span class="line">      <span class="keyword">return</span> darkColorString;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> patterns;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于 mix 方法 的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tinycolor.mix = <span class="function"><span class="keyword">function</span> (<span class="params">color1, color2, amount</span>) </span>&#123;</span><br><span class="line">  amount = amount === <span class="number">0</span> ? <span class="number">0</span> : amount || <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> rgb1 = tinycolor(color1).toRgb();</span><br><span class="line">  <span class="keyword">var</span> rgb2 = tinycolor(color2).toRgb();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> p = amount / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> rgba = &#123;</span><br><span class="line">    r: (rgb2.r - rgb1.r) * p + rgb1.r,</span><br><span class="line">    g: (rgb2.g - rgb1.g) * p + rgb1.g,</span><br><span class="line">    b: (rgb2.b - rgb1.b) * p + rgb1.b,</span><br><span class="line">    a: (rgb2.a - rgb1.a) * p + rgb1.a,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tinycolor(rgba);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>到这里可以很清楚的知道，antd 究竟是按什么规则来处理主题色</p>
<ol>
<li>对于亮色，暗色分开处理</li>
<li>对于暗色主题，特殊处理</li>
</ol>
<iframe
     src="https://codesandbox.io/embed/nameless-http-7r250?autoresize=1&codemirror=1&eslint=1&fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;"
     title="nameless-http-7r250"
     allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"
     sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"
   ></iframe>
]]></content>
      <categories>
        <category>色彩</category>
      </categories>
  </entry>
  <entry>
    <title>色彩</title>
    <url>/2020/04/10/%E8%89%B2%E5%BD%A9/</url>
    <content><![CDATA[<h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><h2 id="什么是颜色"><a href="#什么是颜色" class="headerlink" title="什么是颜色"></a>什么是颜色</h2><blockquote>
<p>颜色是通过眼、脑和我们的生活经验所产生的对光的视觉感受，我们肉眼所见到的光线，是由频率范围很窄的电磁波产生的，不同频率的电磁波表现为不同的颜色，对色彩的辨认是肉眼受到电磁波辐射能刺激后所引起的视觉神经感觉。<br>—- 百度百科</p>
</blockquote>
<p>颜色一直是文艺，艺术的主场，可究其根本，只是人类赋予电磁波不同频率的名称。</p>
<a id="more"></a>

<h2 id="颜色的构成"><a href="#颜色的构成" class="headerlink" title="颜色的构成"></a>颜色的构成</h2><p>理科生总有一股执念：把一切数据化，颜色也不例外，将其解构为 HSB 三个维度</p>
<ol>
<li>H 色相</li>
<li>S 饱和度</li>
<li>B 明度</li>
</ol>
<p>没错，颜色就是这么简单</p>
<div style="width:200px;height:200px;border-radius: 50%;
      background: conic-gradient(red, orange, yellow, green, teal, blue, purple, red); display:flex;justify-content: center;align-items: center;">
<div style="width:200px;height:200px;border-radius: 50%; background-image: radial-gradient(circle, white , transparent 80%);"></div>
</div>

<h3 id="色相"><a href="#色相" class="headerlink" title="色相"></a>色相</h3><p>对于光源来说，需要的三个基本色是 红，黄，蓝（反射光的三个基本色是红，绿，蓝    ）<br><strong>三生万物，</strong>由这三种光，可以组合成所有的颜色</p>
<h3 id="饱和度"><a href="#饱和度" class="headerlink" title="饱和度"></a>饱和度</h3><p>对应着色板上的横轴，表示色彩的纯度，打开调色板可以发现 ,颜色越靠左，越接近白色，表示颜色越淡</p>
<h3 id="明度"><a href="#明度" class="headerlink" title="明度"></a>明度</h3><p>对应着色板上的纵轴，表示颜色的亮度，打开调色板可以发现 ,颜色越靠下，越接近黑色，表示颜色越暗</p>
<div style="width:300px;height:200px;background-image: linear-gradient(-90deg, red,white);">
<div style="width:300px;height:200px;background-image: linear-gradient(transparent,black);"></div>
</div>

<h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>不同的 HSB 组合会给人不同的感觉，例如：饱和度越高，给人的感觉越近，反之，则让人感觉疏远。<br><span style="color:red">红色</span>给人感觉热情，冲动，血腥。<br><span style="color:yellow">黄色</span>给人感觉温暖，活力，积极。<br><span style="color:green">绿色</span>给人感觉生命，清新。<br><span style="color:blue">蓝色</span>给人感觉冷静，和平。<br><span style="color:purple">紫色</span>紫色给人感觉高贵，香气。<br>等等。。</p>
<p>还有，<strong>面积</strong> 也是决定情绪的重要因素，试想一下，一整屏的大红色，是不有些不舒服。</p>
<div style="width:100%;height:100vh; background:#f00"></div>

<p>之前说过，颜色只是不同频率光的别称，光让我们看到物体有颜色，有轮廓<br>所以要抛弃固有色的概念，将颜色结合到环境中去，比如蓝色的光线中的橙子，那么要为这个橙子填充绿色而不是橙色。</p>
<h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><p>通常可以分为一下三类</p>
<ol>
<li>单色相：一个色相，不同的饱和度和明度</li>
<li>类似色：色环上相近的颜色</li>
<li>互补色：色环上对立的颜色</li>
</ol>
]]></content>
      <categories>
        <category>色彩</category>
      </categories>
  </entry>
  <entry>
    <title>校招（八）</title>
    <url>/2020/04/05/%E6%A0%A1%E6%8B%9B%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="八"><a href="#八" class="headerlink" title="八"></a>八</h1><blockquote>
<p>offer 选择</p>
</blockquote>
<p>有点像高考之后，拿着分数报学校，学霸也头疼是去清华还是北大呢？<br>大家考虑的点有这么几种，地点，薪资，晋升，加班，氛围，平台。<br>地点：家里有底子的，听家里安排，否则就是去大城市。<br>晋升：这个属于公司内部的信息，最好能打听到，一年几次晋升，晋升比例，涨薪幅度<br>加班：这个我的建议是大厂可以 996，小厂没必要去遭这个罪<br>氛围：这个比较玄学，有的公司重业务，有的公司重技术，太偏科的进去后会很难受<br>平台：能去大公司，不去小公司，大公司往往提供一个更高的平台，你能从中受益很多<br>薪资：别过于看重薪资，刚毕业去 bat 白干都行，两年以后你看看出来什么身价。</p>
<p>经常遇到的问题：</p>
<ol>
<li>大公司的边缘和小公司的核心？ 大公司边缘</li>
<li>两个小公司 offer 都不满意？ 哪个不加班去那个，有时间多学习，随时准备跳槽</li>
<li>两个大公司怎么选？看业务线，哪个盈利去哪个</li>
</ol>
<h1 id="钱"><a href="#钱" class="headerlink" title="钱"></a>钱</h1><p>最后咱好好说说这个问题 我推测 2020 毕业的学生：本科白菜 16-18k，硕士 18k-20k。<br>hr 告诉你的那个数字不是你真正拿到手的数字。<br>这里推荐你上百度搜索 “工资计算器” ，第一条点进去，默认是北京，但是有好多城市可以选择，他这个就很详细的说明了工资的构成以及到手的具体数字（不准，但是差距不大），还有他左侧的常见问题，也推荐大家看看，<strong>尤其是五险一金，有的公司是按最低比例缴纳的，不要去这样的公司</strong></p>
]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
  <entry>
    <title>校招（七）</title>
    <url>/2020/03/29/%E6%A0%A1%E6%8B%9B%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="七"><a href="#七" class="headerlink" title="七"></a>七</h1><blockquote>
<p>三面&amp;hr</p>
</blockquote>
<p>经历了前两面，你已经被打上了很多个标签，这些标签大多都是技术向，到了三面证明技术得到了一定的认可，面试官通常是你未来的领导或领导的领导。领导们最关心什么呢？<br>关心的是你的到来能不能为现有的团队做出贡献，所以三面一般分为两个部分，前一部分会问技术，后一部分会问理想，技术方面可能不会特别细节，比如你如何看待 XXX 与 XXX 这两种（算法，语言，框架等等），还有比如一个项目随着开发者的不断增加他的提效是越来越少的，怎么解决呢？后一部分聊理想，比如：如果是本科就很有可能问，为什么不考研呢？工作后有什么目标吗？今后两年是怎么打算的？有没有规划过职业路线？<br>HR 面的话就记住，猥琐，别浪。hr 很少挂人，但不代表她没有权力做这件事。hr 一般会问，觉得之前的面试体验怎么样？对我们公司的了解程度？已经有了几个 offer？期望薪资是多少？</p>
<p>这里另外说两个重要的问题<br>第一个就是加班，有的公司是极度排斥加班的，你说你刚毕业，没什么负担，但是人家老人可能都成家立业，你去了天天加班，你让老人怎么办？所以加班问题一定要有所准备，不要装枪口上了。<br>第二个是在 hr 反问环节，一定问好五险一金的缴纳比例，以及薪资结构。</p>
<p>这两面没什么技巧？吹就完了。别什么都实话实说，你说你应聘个实习，人家问你有没有考研的打算，你说有，那对不起，直接再见。公司招实习是希望招到靠谱的能为公司干活的人才，培养了你 6 个月，你走了，公司是傻子吗？再比如，问你有没有女/男朋友，下一句 100%是他在哪个城市呀？所以你俩要是在一个城市就可以说有，要是不在一个城市，那就是没有。</p>
<p>下一篇 offer 的选择与薪资</p>
]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
  <entry>
    <title>校招（六）</title>
    <url>/2020/03/14/%E6%A0%A1%E6%8B%9B%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="六"><a href="#六" class="headerlink" title="六"></a>六</h1><blockquote>
<p>面试</p>
</blockquote>
<p>这个时间点应该有一部分同学体验过面试的感觉，不知感觉如何。</p>
<p>一次面试从开始到结束不过最长不过 1 个半小时，这个时间很短，凭什么通过这么短的时间就判断一个人的能力呢？反过来想，这一个半小时，我到底要怎么做才能让面试官认可我呢？</p>
<p>分类：电话，视频，线下。<br>线下面对面沟通是最好的，你能够把更多的细节展示给面试官。但这种形式今年是不太可能了。<br>电话面试，这种方式很糟糕，声音是信息传递唯一的介质，所以如果你有迟疑，中间有空白，面试官感觉很糟糕，他不知道你在干什么，<strong>所以你的声音不能断，思考期间，你也要说一些废话，或者把自己的思路说出来</strong><br>视频面试，这个一定要注意一点，大家一般是用电脑视频面试，电脑的那个摄像头惨不忍睹。</p>
<p>一面和二面的区别<br>这个不同公司的策略不一样，有的是难易程度的区别，有的是方向侧重点的区别。可能一面问语言基础，二面问框架原理和项目，也可能一面侧重 语言， 框架，二面侧重计算机网络，操作系统。</p>
<p>面试的方式虽然不一样，但具体的面试内容有迹可循。<br><strong>如何面试</strong> （划重点）<br>面试不是考试，你面对的是一个人，而不是卷子。<br>我发现很多人都在去背面经，背知识点，当作考试一样在对待面试，这是不对的，或者说不够的。优秀的应聘者应该扬长避短，主动引导面试官发现自己的优点。</p>
<p>从面试的流程入手，一步一步来看：</p>
<ol>
<li><p>自我介绍<br>面试第一项 99%都是这个，那么如何做自我介绍呢？还是反过来想，面试官为什么问这个问题呢?因为大部分面试官面试之前不会预先看你的简历，借着这个时间看一遍。所以简历和自我介绍构成了应聘者的第一印象。这对这样的情况，自我介绍应该更加简洁，有力，最好像一根针一样，直接刺中要点。我建议介绍的内容 <code>“基本信息+能力+成就”</code>。</p>
</li>
<li><p>第一步完成， 主动权交到面试官，面试官开始提问<br>2.1 针对简历中不清楚的地方了解情况<br>2.2 直接问简历中的项目<br>2.3 抛开简历问事先准备好的题目</p>
<p>以上三种可能应该占到 80%的情况，第一种一般没什么好说的，就是简单了解一下。<br>第二种就看简历的水平写的好不好，之前简历篇提过，优秀的简历所有内容都是重点，都会问，（前端为例，用了框架，vue 或 react，必问原理，内部如何渲染，如何调度，用到了什么数据解构，为什么这么用，换成别的不行吗，有没有自己实现过双向绑定或虚拟 dom，等等）所以确保，你对项目中出现的技术点是足够了解的。这个了解又分为两层</p>
<ol>
<li>仅仅知道内部的运作原理</li>
<li>更进一步有自己对于原理的想法，思考，甚至有自己的应用场景。</li>
</ol>
<p>一般问项目会说“挑一个最能代表你能力的简单介绍一下”，这个时候还是，面试官手里有你的简历，项目经历在那写着呢，那么你要说什么，我建议<code>“背景+角色+技术，也可以+成就”</code></p>
<p>期间，有的面试官很恶心，在你介绍完之后尝试挑战你，<code>“我觉得你做的没什么呀，有什么技术难度吗，成功上线，运行稳定不是最基本的吗？”</code>，针对这一种，你要凸显个人的作用（就是吹牛逼），可以回答开发中发现什么问题，如何思考并解决，最后完善工作流程，提升开发效率，增加上线稳定度。</p>
<p>正常情况下，介绍完项目，我们要开始掌握主动权，因为你才是了解项目的人，不要让面试官一点点的去挖你的优点，千万别高冷，主动一点。面试官的问题应该是针对项目中出现的技术点针对提问，但我们要更进一步，<strong>结合场景</strong> ，技术永远是为业务服务的。你可以说，XXX 的原理是什么什么什么，后面接上，因为 XXX 特性，我们针对性做了什么什么，实现了什么什么。也可以是 XXX 的原理是什么什么，工作中，由于这个特性，出现了什么什么 bug，最后按照什么什么思路，发现并解决。<br>因为项目是你的主场，你要尽可能的展示自己的优点</p>
<p>第三种（抛开简历问事先准备好的题目） ，这种想要掌握主动权难度有所增加，因为是面试官再带着你走，如果真的问道你不会的知识怎么办呢？绝对不要说“不会”，你这不会那不会，要你来干什么。这个时候，要快速的思考，有没有什么相近的知识能说的，或者把自己思考的过程说出来，也许面试官会主动给你一些引导。举个例子：<br>面试官：“手写一下归并排序”<br>应聘者：“卧槽，昨天还背着呢，现在咋忘了”<br>怎么办？你可能写不出归并排序，但他的核心思想你应该能知道，<strong>分治</strong>，哪些算法用到了分治，我说一个最最最简单的，<strong>二分法</strong>，稍微高级一点点，<strong>最大子序列</strong>，你成功把交点转移到了分治的思想上，并展示出你对核心思想的理解。<br>那么如果面试提的问题你正好是会的，怎么办呢？<br>个人建议，不要一次性全说完，留个尾巴，让面试官继续问下去，这样面试官会有一种层次感（前端为例：react 中的 setState 是同步还是异步，答：自定义事件和 setTimeout 是同步，生命周期中为异步，继续问：为什么会出现这样的现象？答：因为 react 有批量更新机制，关键点是 isBatchingUpdates 这个变量，在自定义事件及 setTimeout 等宏事件的上下文中，此变量为 false）<br>其实这一条之前在跟同学的交流中是有争议的，请各位保持独立思考</p>
<p>整体就差不多这样，再说几个经常问的问题</p>
<ol>
<li>为什么选择这个方向，这个问题比较开放，比如上高中开始就一直希望做这个，或者就是对什么什么有兴趣。</li>
<li>有什么问题要问我，我建议你问，“我在您面试过的人中，算什么水平”</li>
<li>你还有什么别的优点要说嘛，这种一般就是，你还可以，但是呢，有另一个人跟你差不多，没有什么特别特别的亮点。</li>
</ol>
</li>
</ol>
<p>最后最后，很多人面试都紧张，适度的紧张是正常的，会促进你更加集中注意力，增加大脑的运转效率，但如果特别特别紧张怎么办呢，这种情况唯一的原因就是你不够自信，导致你害怕，你害怕问道自己不会的，害怕拿不到 offer。<br>我再说一遍，良性的循环是</p>
<h2 id="面试—失败—总结提升—再面试—再失败—再总结提升—直到成功"><a href="#面试—失败—总结提升—再面试—再失败—再总结提升—直到成功" class="headerlink" title="面试—失败—总结提升—再面试—再失败—再总结提升—直到成功"></a>面试—失败—总结提升—再面试—再失败—再总结提升—直到成功</h2><p>不要怕失败。加油！</p>
]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
  <entry>
    <title>校招（五）</title>
    <url>/2020/03/14/%E6%A0%A1%E6%8B%9B%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="五"><a href="#五" class="headerlink" title="五"></a>五</h1><blockquote>
<p>此时你可能已经接到公司短信/邮件的面试邀请了，激动吗？慌张吗？我来帮你准备准备。</p>
</blockquote>
<p>面试之前，我们需要做一点准备工作，（这里说的不是买一身新衣服，做个头发，女生再画个妆，咱不是去 857）<br>这里我们不得不认真思考最开始的问题，什么是“优秀”，以及如何展示自己的“优秀”。我想很多同学都没有思考过第二个问题，不急，慢慢说。<br>想想一个完美的应聘者应该是怎么样的？</p>
<p>985 硕士起步，在校期间，参与校内外技术组织或活动，视野开阔热爱技术，有专利或国际大奖，有自己运营的项目并取得了一定的关注度，在技术的深度和广度之间取得了一个合适的平衡点，甚至还辅修了另外的科目，可以直接为现有团队提供的动力，如果是校招的话，还应该有一线大厂的实习经历。</p>
<p>我觉得以上差不多，6 件套了。这样的人有吗？有！在哪呢？FANG。</p>
<a id="more"></a>

<p>所以你懂了吗，想清楚什么是属于你的“优秀”，也就是你要通过你的哪些特质征服面试官<br>我认为的“优秀”是：</p>
<ol>
<li>有着对技术的痴狂</li>
<li>有着扎实的基本功</li>
<li>有着完整的项目经验或成果</li>
<li>有着对自己的管理</li>
<li>有着对生活的热爱</li>
</ol>
<p>那么，以此 5 条为例如何向面试官展示自己的“优秀呢”</p>
<ol>
<li>有活跃的 github，<strong>对专业内的网红有一定了解</strong> ，在各大技术社区有自己的账户，读过专业的书籍，看过某个框架的源代码，了解其背后实现原理，紧跟技术前沿。</li>
<li>学校讲的例如数据结构，计算机网络等重要课程掌握扎实，对于语言（取决于个人方向）有较深的掌握</li>
<li>有自己的网站，或其他方式能直观的向面试官展示自己成果，体现自己有备而来</li>
<li>有自己的博客，对自己的未来和当下有一定的规划</li>
<li>一个应届毕业生总不能离开学校就灰心丧气，生无可恋。</li>
</ol>
<p>每个人对“优秀”的定义都是不同的，根据自己的情况灵活定义，<strong>这一步实际上是将自己从一个整体解构</strong>，用来应对所谓的合格标准，再用适当的形式展示出来，如果你的筹码还不够，抓紧去学习，去实践，去提升，现在行动还不晚</p>
<p>可能有些同学觉得自己现在再学已经来不及了，人家都是去展示才艺的，咱才刚刚起步追不上了。我要说，你每掌握一个知识点，你的筹码就多了一分，这会直接体现在你的薪资上，人家如果 sp，咱拿个白菜价不行吗。关键就是不要焦虑，把自己做好，这个时候 <strong>稳</strong> 是最重要的，尽可能的挖掘甚至创造自己的优点。这些优点就是你的“人设”，让面试官在回忆你的时候留下印象，可能他记不住你的名字，但是能有一些关键词比如，“优秀的项目能力”，“优秀的算法能力”，“优秀的语言基础”，“优秀的逻辑思维”等等。这些都是你自己决定要展示给面试官一个什么样的自己。</p>
<p>一次面试通常不过 40 分钟到 1 个小时，如何再有限的时间里尽可能的展示高分的自己的呢？<br>下周再见</p>
]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
  <entry>
    <title>校招（四）</title>
    <url>/2020/03/14/%E6%A0%A1%E6%8B%9B%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><blockquote>
<p>笔试</p>
</blockquote>
<p>笔试应该是你见到面试官前最后一个环节，先说形式，分两种：</p>
<ul>
<li>线上（企业自研系统或牛客网等其他第三方线上笔试平台）</li>
<li>线下（多发生于校园宣讲之后）</li>
</ul>
<p>线下没什么好说的，就是考试，答完交卷。</p>
<p>线上的情况占多数，通常开始时间在晚上 7 点或 9 点，持续时长一个半小时到两个小时，<br>开始之前要充分的熟悉平台，确保摄像头和网络的稳定，可能很多人觉得这两句是废话，记住：<strong>小心驶得万年船</strong>。</p>
<a id="more"></a>

<p>关于内容，牛客上应该已经开放了一些公司曾经的题目，大家可以做做看。<br>我把不同公司的题目分为这么几类</p>
<ol>
<li>基础型，这套题不分前后端，统称为研发岗，以基础题为主，整个试卷大量的选择题外加两道或更多编码题。</li>
<li>专业基础型，这套题按照你的方向区分，也是存在大量选择题，同时拥有一些业务实现的题目（前端为例：实现一个具有排序功能的表格，纯 css 画一个扇形），外加两道或更多编码题。</li>
<li>项目实现型，48 小时实现一个 XXX （时限是我随意写的）</li>
<li>算法型，只有 5 到算法题。（没错就是宇宙条,不知道今年是什么套路）</li>
</ol>
<p><strong>大家要充分利用模拟笔试功能熟悉环境</strong> 不要连怎么翻页都不知道。</p>
<p>接下来说说我知道的网站检测作弊的方式：</p>
<ol>
<li>摄像头（不确定麦克风的情况）固定间隔截取图像</li>
<li>部分公司题目的非编码题不可以切出桌面三次</li>
</ol>
<p><strong>编码题一直是笔试后大家讨论的重点，牛客的判断是 oi 模式，就是按测试用例给分，比如有 10 个测试用例，过一个得 10 分，所以有的时候你可以蒙，直接输出一个值说不定就蒙上了，技巧就是首先尝试样例输出，其次是边缘条件，再次是猜测输入用例，手算之后直接输出。</strong></p>
<p><strong>闷声发大财</strong><br>你品，你细品。</p>
<p>笔试结束后，有的公司会直接刷掉一批人，有的公司会记录成绩，综合判断。</p>
<h3 id="经常会碰见一个问题"><a href="#经常会碰见一个问题" class="headerlink" title="经常会碰见一个问题"></a>经常会碰见一个问题</h3><p>两家公司在两个平台的同一时间笔试，针对这种情况我建议你放弃一家。</p>
<h2 id="祝大家笔试取得好成绩-！"><a href="#祝大家笔试取得好成绩-！" class="headerlink" title="祝大家笔试取得好成绩 ！"></a>祝大家笔试取得好成绩 ！</h2>]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
  <entry>
    <title>头条前端面经分析</title>
    <url>/2020/03/13/2020%E5%B9%B4%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%88%86%E6%9E%90%E4%B8%8E%E6%8E%A8%E6%B5%8B/</url>
    <content><![CDATA[<blockquote>
<p>这篇文章不在校招攻略系列中，因为昨天在掘金上看到了两篇宇宙条面经，将跟据现有的面经分析一波</p>
</blockquote>
<h2 id="两篇面经"><a href="#两篇面经" class="headerlink" title="两篇面经"></a>两篇面经</h2><p>很巧，用着掘金的 chrome 插件一下子就看到了这两篇文章，前后相隔不过 4 篇文章</p>
<p>放的掘金的链接，但是他俩应该也在牛客上发了，没找到<br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTZhMTRiMWYyNjVkYTU3Mjk3OGExZDPvvIjlrp7kuaDvvIk=" title="https://juejin.im/post/5e6a14b1f265da572978a1d3（实习）">https://juejin.im/post/5e6a14b1f265da572978a1d3（实习）<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTYxMTM2ZWU1MWQ0NTI3MTk2ZDYwMTnvvIjmoKHmi5vvvIk=" title="https://juejin.im/post/5e61136ee51d4527196d6019（校招）">https://juejin.im/post/5e61136ee51d4527196d6019（校招）<i class="fa fa-external-link"></i></span></p>
<p>个人觉得这两篇面经<strong>非常具有代表性</strong><br>整体来说这两篇面经偏难，比以往要难，能够驾驭的肯定是 Top 级别的人。</p>
<a id="more"></a>

<h3 id="先说实习篇："><a href="#先说实习篇：" class="headerlink" title="先说实习篇："></a>先说实习篇：</h3><ul>
<li>1 面，没有什么超纲的，常规计算机基础，js 基础，框架源码，算法实现</li>
<li>2 面，项目，计算机网络，webpack，<strong>typescript</strong>，react 优化。</li>
<li>3 面，node，算法</li>
<li>4 面，算法，h5 存储</li>
</ul>
<p>这篇面经总体来说问的都是基础同时有一定深度， <strong>基础不等于简单</strong>，有多少人能把 var 和 let 的区别说完整呢，let 到底有没有变量提升。可以看到只有 2 面是问到了项目，估计是项目中没有亮点，或者问了没写进来，意外的是提到了 typescript，可能是项目中用到， 虽然问的很浅，但这证明，仅仅 js 基础掌握的好，已经不太够用了，而且一面问了 vue，二面又 react，说明单独掌握一个框架也是“不够优秀的”，注意 react 问的不是使用方法，而是优化，这又涉及到原理，毕竟只有知道他是怎么运行的才能针对性的优化，所以“知道”，“了解”还不行，要同时“掌握”两个框架。三面 的算法才叫算法，懂得自然懂，不解释。只有四面提到了一点点 css 相关，这感觉考察的不全面啊。</p>
<p>这个人能力是很强的，强过大多数大三的同学，可怕的是：最后被刷了，说明有比他更优秀的人。你品，你细品。</p>
<h3 id="校招篇："><a href="#校招篇：" class="headerlink" title="校招篇："></a>校招篇：</h3><ul>
<li>1 面，vue/react，react hooks， 设计组件，模块化，webpack，jsonp，ajax</li>
<li>2 面 前端安全，计算机网络，业务实现</li>
</ul>
<p>3，4 面没什么意思了，可以看到相比于实习，校招的面试偏重业务场景，而且知识的深度跟实习篇根本不是一个级别，但你如果说有什么特别难的知识点吗，其实也没有，连 react 的原理都没问，考察的正是将知识运用到业务中的能力。</p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>这两篇我觉得好，是因为他体现出了实习和校招的区别。实习侧重知识的掌握，校招侧重知识的应用，所以大方向还是没有变的。</p>
<h3 id="19-年前端行业发生了什么"><a href="#19-年前端行业发生了什么" class="headerlink" title="19 年前端行业发生了什么"></a>19 年前端行业发生了什么</h3><p>相比与之前两年，2019 还是有一些变化的</p>
<ol>
<li>react hooks api 正式推出</li>
<li>WebAssembly 被列入 w3c 标准</li>
<li>TypeScript 更加流行</li>
<li>serverless 在大厂有了一些实践</li>
<li>新的微前端架构</li>
<li>flutter 目标统一天下（有生之年希望能看到）</li>
<li>等等</li>
</ol>
<p>面试的内容肯定也是跟着行业的变化而变化<br>19 届这一年我记得几乎所有公司包括 bat 在内，必问原型链和闭包，而这两篇都没问，还有事件代理，回流重绘，这些这是不是说默认掌握了呢。vue 和 react 在 19 年一整年也在不断的变动，曾经懂原理是优秀，现在仅仅是及格线。曾经 vue，react 大谈生命周期，现在更多的是类 hook 的 api。曾经掌握一个框架是够用的，现在还要对另一个框架有所了解，最起码写过小项目吧，更关键的是要对两个框架的区别有自己的理解。曾经 js 基础更多问的是 es6 的方法怎么用 es5 去实现，现在 es5 似乎淡出视线，直接是 es6789 的天下。曾经更多问的是 promise 和降级实现，现在更多的是 async 和 await。<br>疑惑的是这两篇很少提及 css 相关，个人认为 css 及相关知识还是很重要的。</p>
<p>所以看到对于基础的定义每年都在变化，我至今记得一个问题，是阿里面试官问的：“如果有一天所有浏览器都支持 class，那他还是不是语法糖？”。<br>我猜测今年的问题方向可能会更深更广，广度上来说业内技术动态，pc 端，移动端，（小程序端），后端（node 或 java）都要有所涉猎，深度上 设计模式，操作系统，尤其是 es6 的 proxy 以及 vue3 和 react hooks 的 api 都有着设计模式的支撑。还有 react 试图将浏览器的调度单独拆成一个包，这又离不开操作系统的知识，我觉得从今年开始，前端不再是那个入门简单的跨专业首选的方向了，要求的算法，数据结构，操作系统，计算机网络，甚至编译原理等知识丝毫不逊色与后端。<br>同时，由于业内对于 serverless 的不断探索实践，前端开发工程化不断完整，流程化不断规范，反而要求人对于业务的理解不断加深，所谓的业内最佳实践方案越来越不能满足各种定制化需求，对于不同的场景，更希望看到个性化的解决方案。</p>
<p>也看了一些其他的面经，似乎也有这种倾向，最可怕的事情是自认大厂的公司把难度直接拉到同等水平，一些二线顺势填补等级空缺，小厂直接向大厂学习<br>希望这种情况不要出现。</p>
<p>这一篇实习面经本来找不到了， 后来在牛客上发现了<br><span class="exturl" data-url="aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL2Rpc2N1c3MvMzczNDI5P3R5cGU9MiZhbXA7b3JkZXI9MCZhbXA7cG9zPTEzJmFtcDtwYWdlPTHvvIjlrp7kuaDvvIk=" title="https://www.nowcoder.com/discuss/373429?type=2&amp;order=0&amp;pos=13&amp;page=1（实习）">https://www.nowcoder.com/discuss/373429?type=2&amp;order=0&amp;pos=13&amp;page=1（实习）<i class="fa fa-external-link"></i></span><br>这个是真的变态，感受一下</p>
]]></content>
      <categories>
        <category>2020</category>
      </categories>
  </entry>
  <entry>
    <title>校招（三）</title>
    <url>/2020/03/08/%E6%A0%A1%E6%8B%9B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><blockquote>
<p>简历准备好之后，有哪些投递的渠道呢？</p>
</blockquote>
<ol>
<li>线上官方及合作网站</li>
<li>内推</li>
<li>线下宣讲</li>
</ol>
<a id="more"></a>

<p>第一个就是各个公司的官网，以及像牛客这样的合作网站，这种一般是在线填写信息<br>第二个就是找到熟人，将你的简历通过内部系统投递，<strong>有的会投递到指定部门，这个要注意</strong>，各个公司对内推的定义不一样，有的免笔试，有的简历免筛选，如果成功就职，内推人会以为公司招揽人才的头衔获得好处，但是我想大家也能够发现，现在的内推越来越不值钱，但即便是这样，有也比没有好。<br>第三个一般发生在名校中，宣讲当场紧跟着收简历。如果有条件，<strong>这种是我最推荐大家参加的</strong> 只要你给到简历，基本不会筛掉，都能有笔试面试机会。</p>
<p>关于投递的时间，一般会有一个截止日期，在此之前都可以，<strong>但是</strong> 不同的公司处理方式不一样，有的是截止后统一处理所有简历，有的是投递与后续面试并行，针对第二种我要说，每个岗位就那么多名额，招完了就没有了。</p>
<p>关于投递时机，总有些同学认为自己准备的好不够好不敢投<br><strong>不要这样想，我告诉你，没有人准备好了，一个健康的良性循环是</strong></p>
<p><strong>面试—–失败—-总结提升—-再面试—-再失败—-再总结提升—-直到成功</strong></p>
<p>因此不要把你最心仪的公司放在比较靠前的地方，别像我一样傻了吧唧的第一场就面阿里巴巴</p>
<p><strong>勇敢的投出你的第一份简历吧！注意保证你的手机不欠费，同时经常检查邮箱的垃圾桶！</strong></p>
]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
  <entry>
    <title>校招（二）</title>
    <url>/2020/03/08/%E6%A0%A1%E6%8B%9B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><h2 id="准备简历"><a href="#准备简历" class="headerlink" title="准备简历"></a>准备简历</h2><blockquote>
<p>这一篇开始，我们进入到实操的部分</p>
</blockquote>
<p>根据之前的时间节点，必须招聘开始之前准备好简历。但是现在的套路是打开指定的网站填写个人信息，hr 通过你填写的信息在线筛选，所以简历用于 <strong>通过 HR 这一关</strong> 的作用越来越小，更多的是面试时给面试官看，但是如果能与面试官直接交谈，文字简历的作用又小了很多，直接聊就好了，虽然作用越来越小，但还是必不可少。</p>
<p>实习生的特点就是大多数人都没有工作经历，是一个真正的小白，对于公司一无所知，但是不要怕，别人也不知道公司里面是什么样的，那么针对这样的特点，我们的思路就清晰多了，简历要体现 <strong>卓越的校园经历</strong><br>校招生的简历特点是经历过实习，有过生产项目经验，要体现 <strong>卓越的学习，业务的能力</strong></p>
<h3 id="如何写简历？"><a href="#如何写简历？" class="headerlink" title="如何写简历？"></a>如何写简历？</h3><a id="more"></a>

<p>网上有太多相关的答案，我来说说我的建议</p>
<ol>
<li>搜索各种在线简历的网站，这种网站上有大量的模板，在线编辑后，可以花 5 到 10 块钱下载</li>
<li>找一个在职的学长学姐给你定制一个</li>
</ol>
<p>不会写，不要硬写，模板可以过滤掉大多数的傻瓜式错误，<br>多看几个模板也许会找到一些感觉</p>
<p>通常情况下简历有这么几个板块</p>
<ul>
<li><p>个人基本信息<br>姓名，联系方式，出生日期/年龄，求职意向（岗位），对颜值自信的放一张照片</p>
</li>
<li><p>教育经历<br>20XX~20XX XXX 大学 XXX 专业 学士学位（学历高的写前面，博士-硕士-学士的顺序）</p>
</li>
<li><p>校园经历<br>注意：此校园经历非上文的校园经历，上文的校园经历范围更大，包括下面项目经验及获奖经历，毕竟都是在校园里发生的，这里更突出的是个人综合素质和你对应聘职业的热爱，比如项目/社区/组织的运营或管理，等。例：加入/成立学校 XXX 工作室期间运营/管理工作室咋咋咋的，取得了什么样的成果。</p>
</li>
<li><p>项目经验<br>这个项目经验最好紧紧抓住上文的运营和管理，在学校，最好的项目就是跟着导师做项目一般有明确的目标，其次是自己有想法，获得老师/学校/学生组织的支持，进而推广开来有师生使用的项目，最差的项目就是课设，没有受众，没有运营，关键是学校里教的项目一般技术比较落后，最有特点的 vc6.0 大家都懂。<br>校园里的项目无非以上三种，可能还有极少数的同学有能力在大学就接私活，针对第三种项目，不要写，它没办法突出你的优秀你懂吗？你品吧。实习因为没有公司生产环境的开发经历，项目可以稚嫩，但是要体现扎实的基本功。校招则体现熟练的项目把控，生产环境中的规则，应对问题的措施，同时拥有了实际经验对于项目/产品/技术的理解要更深刻。<br>一般写三个项目比较好，主要写这么几点</p>
<ol>
<li>自己的角色</li>
<li>技术栈</li>
<li>遇到的困难</li>
<li>项目结束后总结 可以提升的地方</li>
<li>项目取得的成就</li>
</ol>
<p><strong>如果想更专业一些，请搜索“star 法则”</strong><br> 第一点就是写自己在项目中的做了什么，毫无疑问领导者的角色更能引起面试官的兴趣<br> 技术栈也不用多说，你写上去的肯定是后面会着重问的，更新或者更经典的东西能引起面试官的兴趣（假如 2020 年你写一个 jquery 的项目，直接再见）<br> 遇到的困难这里主要写技术上的，重点是如何解决问题的，体现出清晰的思路会更好<br> 总结与反思 这一块就比较开放了，技术上，产品上都可以说<br> 成就这块吹就行了</p>
</li>
<li><p>获奖经历<br>含金量高的写前面，不要写非专业相关的，除非是公司业务相关<br>比如你去 keep 应聘程序员，你说你有个健身大赛的奖，这是好的，这叫与公司价值观相符。<br>实在没得写，校园 XXX 大赛 X 等奖</p>
</li>
</ul>
<h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><p>以上需要结合自身情况灵活变通，比如：校园经历平平无奇，或者非专业相关，那就把这个点放在后面甚至删掉，如果是校招的话可以加一个实习经历。个人基本信息，教育经历，获奖经历没有操作的空间。这一部分通常也会是 HR 初筛时最看重的，通常 10 个 hc 可能会收到 3000 份甚至更多的简历，面试官不可能全部面一遍，所以学历，学校，获奖经历就会成为过滤的重要筛选项，如果这个时候被干掉了，一点办法也没有，只能说缘分没到，通常企业也不会回复说简历不通过。根据我的经历如果简历出去 7 天没有联系那就别抱希望了。<br>真正到面试的时候一二面试官都是专业出身，会把大部分的精力放在项目经历和专业能力上，所以如果你有项目里没有用到的技能点，可以另开一栏单独说自己掌握的能力。<br>换位思考也是优秀的人的重要能力，站在面试官的角度去思考，希望看到一个什么样的简历，通过这份简历能判断出这个应聘者有哪些优点，有哪些话是无用的，使阅读者白白浪费时间。<br>想想企业需要什么，而不是我有什么。</p>
<h3 id="简历的排版"><a href="#简历的排版" class="headerlink" title="简历的排版"></a>简历的排版</h3><p>不要花费过多的时间在简历的设计上，除非你是设计专业，但是同时适当的排版可以改进简历的视觉展示效果。</p>
<ol>
<li>对齐：不要使用居中对齐</li>
<li>重复：标题或模块的样式重复，更具结构性</li>
<li>对比：适当的对比可以突出重点，比如字体加粗</li>
<li>亲密性： 把相关的内容布局更 紧凑</li>
<li>字体：使用等宽字体，使得再屏幕上阅读舒适</li>
<li>一页写满就好</li>
</ol>
<p><strong>切记：</strong> 不要自己夸自己，什么有责任心啊，能吃苦啊，这些东西，正确的做法是用外在的客观的东西来证明，比如你说算法是强项，你可以拿出 acm，oi 等竞赛的奖项出来，你说你热爱编程，你可以拿出你的博客，你的网站，你的 github 出来。</p>
<p><strong>关于技术项目：</strong> 这一块可能是大多数同学不会写的，因为压根就没做过什么，我给你几个点子</p>
<ol>
<li>针对这次疫情（2019 新冠肺炎）写一个程序，为了有受众，你可以主动找到导员，提供返校统计，个人疫情期间流动信息统计的功能，我想大多数学校还是使用 excel 导员发到班长，班长统计，在返回导员，导员再统计，所以痛点在导员和班长，这两个功能只是为了有受众，有用户，在此之上你可以肆意的添加功能，而这些功能是为了体现你的技术能力，同时注意不要杀鸡用牛刀，项目架构设计的合理性也是面试官非常注意的<br>前端为例，业务上可以把先在网上疫情地图的功能抄过来，同时根据自己的情况加上每一位同学的地点动态，这不就变成自己的东西了吗，技术上就突出了 canvas 图形这一块的知识深度与应用能力，同时结合框架 vue 或 react，再到最后的线上部署，这就是一个非常完整的项目，如果再进一步，就尝试在线编辑信息，可以结合富文本编辑器（注意不是让你引入个插件就完事了，这没法体现你的优秀），再进一步，多人实时在线编辑，或者地图这块也可以做很多文章，自行发挥想象</li>
<li>轮子，随便一个库的轮子。不一定很完整，关键的地方处理好就行<br>前端为例 vue 的关键点就是双向绑定，数据驱动更新，react 关键点就是 fiber 与 reconciler，你说这太难了，那咱看看 ui 库 antd 和 ele，如果还是难，那就一些功能性的组件比如图片裁剪组件，富文本编辑器组件</li>
<li>仿 XXX 网站，网上一堆教程，此为下策，面试官见的太多了，重点是突出在模仿中学习能力与思考能力</li>
<li>写一个博客，博客重要的是内容，其次才是网站的建设，这点要注意。</li>
</ol>
]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
  <entry>
    <title>校招（一）</title>
    <url>/2020/03/08/%E6%A0%A1%E6%8B%9B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><blockquote>
<p>这一篇谈谈时间与流程相关</p>
</blockquote>
<h2 id="招聘时间节点"><a href="#招聘时间节点" class="headerlink" title="招聘时间节点"></a>招聘时间节点</h2><ul>
<li>春招<br> 春招通常起于 3 月止于 6 月，当然一些企业设置了所谓提前批，可能时间跨度更长<br> 招聘对象是当年大三（实习职位）以及大四（正式职位）</li>
<li>秋招<br> 秋招通常起于 8 月止于 11 月，相比与春招，秋招才是重头戏，遍地神仙打架<br> 8 月一般是提前批开始的时间，9 月是正式批开始的时间<br> 招聘对象是当年大四（正式职位）</li>
</ul>
<blockquote>
<p>对实习额外说几句，有的公司将实习还分为日常实习和统招实习，区别就是前者不限年纪，大一也能投简历但是不能留用，而后者只有大三可以投简历，有留用机会</p>
</blockquote>
<blockquote>
<p>国外上学的同学切记，每年都会一些在国外上学的同学因为毕业时间与国内不同，根本就不知道秋招的事，等他回国了，企业已经开始招聘下一批人了</p>
</blockquote>
<a id="more"></a>

<h2 id="招聘流程节点"><a href="#招聘流程节点" class="headerlink" title="招聘流程节点"></a>招聘流程节点</h2><p>知道了时间节点，再来看看具体的流程节点，这里从应聘者的角度出发</p>
<ol>
<li>准备简历</li>
<li>投递简历</li>
<li>笔试</li>
<li>一面</li>
<li>二面</li>
<li>三面</li>
<li>可能存在的 456 面</li>
<li>HR 面</li>
<li>选择 offer</li>
<li>签三方</li>
</ol>
<p>以上就是一次应聘的全部流程除了 1，9 以外，其他的你会重复很多很多很多很多很多很多次。<br>这一篇内容很少，但确是整体的骨架，对宏观的把握是为了心中有数，遇事不慌。</p>
]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
  <entry>
    <title>校招（零）</title>
    <url>/2020/03/08/%E6%A0%A1%E6%8B%9B%EF%BC%88%E9%9B%B6%EF%BC%89/</url>
    <content><![CDATA[<h1 id="零"><a href="#零" class="headerlink" title="零"></a>零</h1><p>这是我第一次想认真写点东西，至于为什么，大概是想做点除了写代码之外的事情，同时也想在互联网上留下一点自己的痕迹，毕竟在未来很可能每个人都只是一堆数据罢了。想来能写下来分享的可能只有 19 年毕业找工作时我人生的灰暗时刻，实在是不希望更多的人毫无准备的再一次经历那样糟糕的时光，特此总结出一份我认为可能对大家有帮助的攻略。</p>
<a id="more"></a>

<p>我的大学是一个普通的二本，家住五线城市，如果我找不到工作就要花一些钱找人去我父亲所在的某国企当一线工人，家庭唯一庆幸的是父母身体健康，能自给自足我毕业以后不用向家里寄钱补贴。</p>
<blockquote>
<p>其实有点奇怪，我们计算机学院里每个专业都有几个班是在固定的几个省以一本的分数线招生，所以同样的教室里可能有一本的同学也能有二本的同学</p>
</blockquote>
<p><strong>所以你看，我不是 985/211，这也不是个逆袭的故事，结局并没有就职 BAT</strong><br><strong>如果你是 985/211/硕士，毕业直接去国企/央企/银行/研究所，抱歉，超纲了</strong></p>
<p>我曾在京东实习，995 工作制（面上不是这么说的），加班严重而且没有技术氛围所以没想留下，后来想留也留不下，京东决定<code>淘汰不能拼搏的人</code>，不仅我们部门 12 个实习生没有留用，而且还优化部分员工。当然要客观说一下京东不是一个小公司，我所能接触到的整个大部门不过一百多人，业务能说上话的不过十几人，不能一概而论。</p>
<blockquote>
<p>京东发布的 19 届校招报告中称 所有录用者中 80%为硕博</p>
</blockquote>
<p>我经历过每天看着别人晒 offer，而自己屡战屡败的无力，我经历过面试官因为看到学校不出名而轻蔑一笑的尴尬，也经历过耗尽浑身力气走完面试流程取像石沉大海一样的绝望；可能面试时你自我感觉良好，面试官笑着送走你，你不知道的是有一个人跟你一样优秀但人家是硕士学历，你不知道的是别人除了回答面试官的问题之外还能主动引出下一个自己擅长话题，甚至你不知道的是这个岗位已经招满了，但这都是我们应该承受的因为 3 月份的我们还不够“优秀”</p>
<p>经历不断的失败，后来也陆续拿了以些 offer, 这其中的曲折与艰辛我永远也忘不了。<br>我个人对校招的结局倒是比较满意，在薪资，加班，技术氛围中找到了一个平衡点。（得瑟一下，到 3 月 6 号还是在家办公）</p>
<p><strong>有些弯路，有些痛苦，你必须要经历一次</strong><br>首先，一个事实是所有企业都希望招到“优秀的人” ，然而按正态分布来说大部分人都是“平庸的人”，所以就有了企业抱怨自己招不到人，应聘者抱怨就业难。这中间有一个问题就是如何界定优秀与平庸？你以为的“优秀”是企业需要的“优秀”吗？2020 年 874 万毕业生，如果有 20%的“优秀率”剩下的就不就业了吗？所以不要以为是世界抛弃了你，抛弃你的只有你自己。</p>
<p>曾经当我试图找一些别人的经验时，发现别人大二就有了实习，若干奖项，这样的经验实在是学不来<br>幸好最终我看到了第二天的太阳，如果你此时身处黑暗，不要抛弃自己，我愿告诉你我是如何变成那个“优秀的人”，如果对于校招你还不知道要做什么，这套攻略希望可以帮助迷路的你找到方向，同时也希望你具有独立思考的能力（这是作为优秀的人的一个非常重要的素质），因为我不敢保证攻略观点完全适合你，但句句发自肺腑。</p>
<p>因为我的方向是前端，所以攻略中一些地方以前端为例，但大部分都是通用的。<br>另外这并不是技术系列，但最后会附上我曾经看过的前端复习资料。</p>
]]></content>
      <categories>
        <category>校招</category>
      </categories>
  </entry>
</search>
